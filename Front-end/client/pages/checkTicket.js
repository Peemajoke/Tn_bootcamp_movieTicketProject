import Head from "next/head";
import React, { useState } from "react";
import Navbar from "../components/navbar";
import Footer from "../components/Footer";
import { AudioOutlined } from "@ant-design/icons";
import { Input, Space, Descriptions, Modal, Form } from "antd";
import { useMutation, useLazyQuery, gql } from "@apollo/client";
import Cookies from 'js-cookie'

const { Search } = Input;

const suffix = (
  <AudioOutlined
    style={{
      fontSize: 16,
      color: "#1890ff",
    }}
  />
);

// const getTicketByRef_num = gql`
// query($ref_num: String!) {
//   getTicketByID(ref_num: $ref_num) {
//     data {
//       _id
//       ref_num
//       email
//       movie
//       theater
//       dateTime
//       seat
//       price
//     }
//   }
// }
// `;

const getTicketByRef_numForClient = gql`
query($ref_num: String!, $input: FindTicketForClientInput!) {
  getTicketByIDForClient(ref_num: $ref_num, input: $input) {
    data {
      _id
      ref_num
      email
      movie
      theater
      dateTime
      seat
      price
    }
  }
}
`;

function checkTicket(props) {
  const [ref_num, setRef_num] = useState("");
  const [isSearchOnce, setIsSearchOnce] = useState(false);

  // const [getTicket,{ loading, data }] = useLazyQuery(getTicketByRef_num);
  const [getTicketForClient,{ loading, data }] = useLazyQuery(getTicketByRef_numForClient);

  const onSearch = async () => {

    if(ref_num==""){
      Modal.warning({
        title: 'Cannot perform this search!',
        content: `A ticket's reference code must be provide to perform a search.`,
      });
    }
    
    console.log(ref_num);
    //can get anyone ticket
    // await getTicket({ variables: { ref_num: ref_num}})

    //can only get own ticket
    const ref_numInput = { variables: { ref_num: ref_num, input: { token: Cookies.get('token') } }}
    console.log('ref_numInput')
    console.log(ref_numInput)
    await getTicketForClient(ref_numInput)
    setIsSearchOnce(true)
    console.log('isSearch: ', isSearchOnce)
  };

  const showTicketDetail = () => {
    console.log('ticket data', data)
    if (data!==undefined){
      return (
    <>
    <h2 style={{textAlign:'center'}}>Ticket Info:</h2>
    {/* For fetch anyone ticket */}
    {/* <Descriptions title="" bordered={true} style={{paddingLeft:'60px', paddingRight:'60px'}} size='medium'>
      <Descriptions.Item label="ref_num">{data.getTicketByID.data.ref_num}</Descriptions.Item>
      <Descriptions.Item label="Movie">{data.getTicketByID.data.movie}</Descriptions.Item>
      <Descriptions.Item label="Theater">{data.getTicketByID.data.theater}</Descriptions.Item>
      <Descriptions.Item label="Show Time">{data.getTicketByID.data.dateTime.slice(11,16)}</Descriptions.Item>
      <Descriptions.Item label="Seat">{data.getTicketByID.data.seat}</Descriptions.Item>
    </Descriptions> */}

    {/* For fetch own ticket */}
    <Descriptions title="" bordered={true} style={{paddingLeft:'60px', paddingRight:'60px'}} size='medium'>
      <Descriptions.Item label="ref_num">{data.getTicketByIDForClient.data.ref_num}</Descriptions.Item>
      <Descriptions.Item label="Movie">{data.getTicketByIDForClient.data.movie}</Descriptions.Item>
      <Descriptions.Item label="Theater">{data.getTicketByIDForClient.data.theater}</Descriptions.Item>
      <Descriptions.Item label="Show Time">{data.getTicketByIDForClient.data.dateTime.slice(11,16)}</Descriptions.Item>
      <Descriptions.Item label="Seat">{data.getTicketByIDForClient.data.seat}</Descriptions.Item>
    </Descriptions>
    </>
    )
    }else return null
  }

  return (
    <>
      <Head>
        <title>S Major F: Check Ticket</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar />

      <Space direction="vertical" style={{height: '87vh', width:'100%', paddingTop:"3%"}} >
      <h1 style={{textAlign:'center', paddingTop:'30px'}}>Check For Ticket Information</h1>
        <Form
        name="basic"
        labelCol={{ span: 11 }}
        wrapperCol={{ span: 16 }}
        initialValues={{ remember: true }}
        autoComplete="off"
        style={{paddingTop:'20px'}}
      >
        <Form.Item
          label="Ticket's reference code"
          name="refcode"
          rules={[{ required: true, message: "Please input ticket's reference code" }]}
          style={{ width:'100%'}}
        >
        <Search
          placeholder="type ticket's ref_number"
          allowClear
          onSearch={onSearch}
          style={{ width: 300 }}
          onChange={(e) => setRef_num(e.target.value)}
        />
        </Form.Item>
        </Form>
      {/* {loading&&<p>loading...</p>} */}

      {/* For fetch anyone ticket*/}
      {/* {isSearchOnce&&data&&data.getTicketByID==null&&<h2 style={{textAlign:'center', paddingTop:'30px'}}>Sorry, there is no ticket you are looking for.</h2>}
      {isSearchOnce&&data&&data.getTicketByID!=null&&showTicketDetail()} */}

      {/* For fetch own ticket*/}
      {isSearchOnce&&data&&data.getTicketByIDForClient==null&&<h2 style={{textAlign:'center', paddingTop:'30px'}}>Sorry, there is no ticket you are looking for.</h2>}
      {isSearchOnce&&data&&data.getTicketByIDForClient!=null&&showTicketDetail()}
      </Space>

      <Footer />
    </>
  );
}

export default checkTicket;
